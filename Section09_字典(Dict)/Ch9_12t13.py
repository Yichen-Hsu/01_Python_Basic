'''
建立一個空字典

在程式設計時，也允許建立一個空字典，建立空字典的語法如下:
mydict = {}
上述建立完成後，可以用9-1-3節增加字典元素的方式為空字典建立元素。
'''

# Ch9_12.py 建立一個小兵的空字典，然後為小兵建立元素
soldier0 = {}
print('空小兵的字典', soldier0)
soldier0['tag'] = 'red'
soldier0['score'] = 3
print('新的小兵字典', soldier0)


'''
字典的拷貝

在大型程式開發過程，也許為了要保護原先字典內容，所以常會需要將字典拷貝，此時可以使用此方法。

new_dict = mydict.copy()

上述所複製的字典是獨立存在新位置的字典。
'''

# Ch9_13.py 複製字典的應用，同時列出新字典所在位置，如此可以驗證新字典與舊字典是不同字典
fruits = {'西瓜':15, '香蕉':20, '水蜜桃':25}
cfruits = fruits.copy()
print(f'位置 = {id(fruits)}, fruits元素 = {fruits}')
print(f'位置 = {id(cfruits)}, fruits元素 = {cfruits}')

'''
請留意上述說明的是淺拷貝
淺拷貝與深拷貝的觀念一樣可以應用在字典觀念
如果字典內容有包含子物件時，也許建議使用深拷貝，這樣可以更加保護原物件內容。
'''
# ex01 淺拷貝在更改字典子物件內容時，造成原字典子物件被修改。
a = {'a':[1, 2, 3]}
b = a.copy()
b['a'].append(4)
print(a)
print(b)

'''
上述程式的重點是碰上修改子物件時，原物件內容也被更改了。
此外，上述字典內鍵是串列，更多相關知識在9-4節會說明。

所以如果要更安全的保護字典，建議可以使用深拷貝。
'''

# ex02 深拷貝在更改字典子物件內容時，原字典子物件內容可以不改變。
import copy
a = {'a':[1, 3, 5]}
b = copy.deepcopy(a)
b['a'].append(4)
print(a)
print(b)
