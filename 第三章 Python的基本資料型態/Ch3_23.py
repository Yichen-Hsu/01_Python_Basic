'''
3-5-1 ASCII 碼

計算機內部最小的儲存單元是(bit)，這個位元只能儲存是0或1。 一個英文字元在計算機中是被儲存成8個位元的一連串0或1中
儲存這個英文字元的編碼我們稱ASCII(American Standard Code for Information Intercharge, 美國資訊交換邊準程式碼。)

在這個ASCII表中由於是用8個位元定義一個字元，所以使用了0-127定義了128個字元，在這個128字元中有33個字元是無法顯示的控制字元，其他則是可以顯示的字元。
不過有一些應用程式擴充了功能，讓部分控制字元可以顯示，例如:樸克牌花色、笑臉等。
至於其他可以顯示字元有一些符號，例如: + - = 0 ~ 9 大寫A-Z 小寫a-z 這些每一個符號皆有一個編碼，我們稱這邊碼是ASCII碼
'''
#我們可以使用下列執行資料做轉換
'''Chr(x): 可以回傳函數x值得ASCII或Unicode字元'''
'''例如: ASCII表可知，字元a的ASCII碼值是97，可以使用下列方式印出字元。'''
x = 97
print(chr(x))

'''英文小寫與英文大寫的碼值相差32，可參考下列實例。'''
x = 97
x -= 32
print(chr(x))

'''
Unicode 碼
電腦是美國發明的，因此ASCII碼對於英語系國家的確很好用，但是地球是一個多種族社會，存在有幾百種語言與文字，ASCII所能容納的字元是有限的，只要隨便
一個不同語系的外來辭，例如:Cafeˊ含重音字元就無法顯示了，更何況有幾萬中文字或其他語系文字。為了讓全球語系的使用者可以彼此用電腦溝通，因此有了Unicode
碼的設計。

Unicode碼的精神是，所有的文字皆有一個碼值，我們也可以將Unicode想成是一個字符集，可以參考下列網頁:
    " http://www.unicode.org/charts/ "

目前Unicode使用16位元定義文字，2^16等於65536，相當於定義了65536個字元，它的定義方式是以"/u"開頭後面有4個16進位的數字，所以是從"/u0000"至"/uFFFF"之間(/須反斜)
在上述的網頁中可以看到不同語系表，其中East Asian Scripts欄位可以看到CJK，這是Chinese、Japanese 與 Korean 的縮寫，在這裡可以看到漢字的Unicode碼值表
CJK統一漢字的編碼是在 4E00 - 9FBB 之間。

至於在Unicode的編碼中，前128個數值是保留給ASCII碼使用，所以對於原先存在ASCII碼中的英文大小寫、標點符號...等，是可以正常在Unicode碼中使用，在應用Unicode
編碼中，我們很常使用的是 ord() 函數。

ord(x): 可以傳回函數字元參數 x 的unicode碼值，如果是中文字也可以傳回 Unicode碼值。如果是英文字元，Unicode碼值與ASCII碼值是一樣的。
有了這個函數，我們可以很輕易地獲得自己名字的Unicode碼值。

'''

#CH3_23.py: 這個程式首先會將整數97轉換成英文字元'a'，然後將英文字元'a'，轉換成unicode碼值，最後將中文字'承'轉成unicode碼值。

x1 = 97
x2 = chr(x1)
print(x2)
x3 = ord(x2)            # 輸出數值97的字元
print(x3)
x4 = '許'               # 輸出字元x3的Unicode(十進位)碼值
print(hex(ord(x4)))     # 輸出字元'承'的Unicode(16進位)碼值
x5 = '詣'
print(hex(ord(x5)))
x6 = '承'
print(hex(ord(x6)))

y1 = '陳'
y2 = '奇'
y3 = '靈'
print(hex(ord(y1)))
print(hex(ord(y2)))
print(hex(ord(y3)))